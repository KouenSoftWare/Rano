#pragma once
#include <boost/shared_ptr.hpp>
#include <boost/weak_ptr.hpp>

class Event;
class EventLoop;

class EventFunc
{
	FuncPtr func_;
	boost::shared_ptr<Event> event_;
	boost::weak_ptr<EventLoop> el_;
public:
	EventFunc(FuncPtr func, boost::shared_ptr<Event>& event, boost::weak_ptr<EventLoop> el):
		func_(func),
		event_(event),
		el_(el)
	{}

	EventFunc(FuncPtr func,  boost::weak_ptr<EventLoop> el):
		func_(func),
		event_(),
		el_(el)
	{}

	void setEvent(boost::shared_ptr<Event> &e){
		event_.swap(e);
	}

	void doWork(){
		func_(event_, el_);
		event_.reset();
	}

	EventFunc& operator=(const EventFunc& rhs){
		if(&rhs != this){
			event_ = rhs.event_;	
			func_  = rhs.func_;
		}
		return *this;
	}
};
