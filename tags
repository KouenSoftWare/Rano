!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Add	Epoll.h	/^	void Add(TcpConnection*);$/;"	p	class:Epoll	access:public	signature:(TcpConnection*)
Addition	StorageZone.cpp	/^void StorageZone::Addition(int id, Event*& pEvent)$/;"	f	class:StorageZone	signature:(int id, Event*& pEvent)
Addition	StorageZone.cpp	/^void StorageZone::Addition(int id, boost::weak_ptr<TcpConnection> pTcp)$/;"	f	class:StorageZone	signature:(int id, boost::weak_ptr<TcpConnection> pTcp)
Addition	StorageZone.h	/^	void Addition(int, Event*&);$/;"	p	class:StorageZone	access:public	signature:(int, Event*&)
Addition	StorageZone.h	/^	void Addition(int, boost::weak_ptr<TcpConnection>);$/;"	p	class:StorageZone	access:public	signature:(int, boost::weak_ptr<TcpConnection>)
AutoMutex	AutoMutex.h	/^	AutoMutex(CMutex mutex):$/;"	f	class:AutoMutex	access:public	signature:(CMutex mutex)
AutoMutex	AutoMutex.h	/^class AutoMutex$/;"	c
AutoMutex::AutoMutex	AutoMutex.h	/^	AutoMutex(CMutex mutex):$/;"	f	class:AutoMutex	access:public	signature:(CMutex mutex)
AutoMutex::mutex_	AutoMutex.h	/^	CMutex mutex_;$/;"	m	class:AutoMutex	access:private
AutoMutex::~AutoMutex	AutoMutex.h	/^	~AutoMutex(){$/;"	f	class:AutoMutex	access:public	signature:()
Buffer	Buffer.h	/^	Buffer():length_(0){}$/;"	f	class:Buffer	access:public	signature:()
Buffer	Buffer.h	/^class Buffer$/;"	c
Buffer::Buffer	Buffer.h	/^	Buffer():length_(0){}$/;"	f	class:Buffer	access:public	signature:()
Buffer::append	Buffer.cpp	/^void Buffer::append(char* msg, size_t size)$/;"	f	class:Buffer	signature:(char* msg, size_t size)
Buffer::append	Buffer.h	/^	void append(char*, size_t);$/;"	p	class:Buffer	access:public	signature:(char*, size_t)
Buffer::clear	Buffer.h	/^	void clear(){$/;"	f	class:Buffer	access:public	signature:()
Buffer::data	Buffer.cpp	/^char* Buffer::data()$/;"	f	class:Buffer	signature:()
Buffer::data	Buffer.h	/^	char* data();$/;"	p	class:Buffer	access:public	signature:()
Buffer::hasData	Buffer.cpp	/^bool Buffer::hasData()$/;"	f	class:Buffer	signature:()
Buffer::hasData	Buffer.h	/^	bool hasData();	$/;"	p	class:Buffer	access:public	signature:()
Buffer::length	Buffer.cpp	/^int Buffer::length()$/;"	f	class:Buffer	signature:()
Buffer::length	Buffer.h	/^	int length();$/;"	p	class:Buffer	access:public	signature:()
Buffer::length_	Buffer.h	/^	int length_;$/;"	m	class:Buffer	access:private
Buffer::storage_	Buffer.h	/^	vector<char> storage_;$/;"	m	class:Buffer	access:private
Buffer::update	Buffer.cpp	/^void Buffer::update(size_t size)$/;"	f	class:Buffer	signature:(size_t size)
Buffer::update	Buffer.h	/^	void update(size_t);$/;"	p	class:Buffer	access:public	signature:(size_t)
CMutex	CMutex.h	/^	CMutex(){$/;"	f	class:CMutex	access:public	signature:()
CMutex	CMutex.h	/^class CMutex$/;"	c
CMutex::CMutex	CMutex.h	/^	CMutex(){$/;"	f	class:CMutex	access:public	signature:()
CMutex::lock	CMutex.h	/^	void lock(){$/;"	f	class:CMutex	access:public	signature:()
CMutex::mutex_	CMutex.h	/^	pthread_mutex_t mutex_;$/;"	m	class:CMutex	access:private
CMutex::unlock	CMutex.h	/^	void unlock(){$/;"	f	class:CMutex	access:public	signature:()
CMutex::~CMutex	CMutex.h	/^	~CMutex(){$/;"	f	class:CMutex	access:public	signature:()
CPPFLAGS	makefile	/^CPPFLAGS =  $(addprefix -I, $(include_dirs)) $(addprefix -L,$(LDFLAGS))$/;"	m
DelListen	Epoll.cpp	/^int Epoll::DelListen(const int& fd, map<int, boost::shared_ptr<TcpConnection> >::iterator& iter)$/;"	f	class:Epoll	signature:(const int& fd, map<int, boost::shared_ptr<TcpConnection> >::iterator& iter)
DelListen	Epoll.h	/^	int DelListen(const int&,map<int, boost::shared_ptr<TcpConnection> >::iterator&);$/;"	p	class:Epoll	access:private	signature:(const int&,map<int, boost::shared_ptr<TcpConnection> >::iterator&)
ERROR	ThreadPool.h	7;"	d
Epoll	Epoll.cpp	/^Epoll::Epoll():$/;"	f	class:Epoll	signature:()
Epoll	Epoll.h	/^	Epoll();$/;"	p	class:Epoll	access:public	signature:()
Epoll	Epoll.h	/^class Epoll:$/;"	c	inherits:EventSourceBase,EventTargetBase
Epoll::Add	Epoll.h	/^	void Add(TcpConnection*);$/;"	p	class:Epoll	access:public	signature:(TcpConnection*)
Epoll::DelListen	Epoll.cpp	/^int Epoll::DelListen(const int& fd, map<int, boost::shared_ptr<TcpConnection> >::iterator& iter)$/;"	f	class:Epoll	signature:(const int& fd, map<int, boost::shared_ptr<TcpConnection> >::iterator& iter)
Epoll::DelListen	Epoll.h	/^	int DelListen(const int&,map<int, boost::shared_ptr<TcpConnection> >::iterator&);$/;"	p	class:Epoll	access:private	signature:(const int&,map<int, boost::shared_ptr<TcpConnection> >::iterator&)
Epoll::Epoll	Epoll.cpp	/^Epoll::Epoll():$/;"	f	class:Epoll	signature:()
Epoll::Epoll	Epoll.h	/^	Epoll();$/;"	p	class:Epoll	access:public	signature:()
Epoll::GetEvents	Epoll.cpp	/^void Epoll::GetEvents(vector<Event*>&ret_eventArray)$/;"	f	class:Epoll	signature:(vector<Event*>&ret_eventArray)
Epoll::GetEvents	Epoll.h	/^	void GetEvents(vector<Event*>&);$/;"	p	class:Epoll	access:public	signature:(vector<Event*>&)
Epoll::LoadEvents	Epoll.cpp	/^void Epoll::LoadEvents(int sId, vector<Event*> &vecEvent)$/;"	f	class:Epoll	signature:(int sId, vector<Event*> &vecEvent)
Epoll::LoadEvents	Epoll.h	/^	void LoadEvents(int, vector<Event*>&);$/;"	p	class:Epoll	access:public	signature:(int, vector<Event*>&)
Epoll::SaveEvent	Epoll.cpp	/^void Epoll::SaveEvent(Event* &event)$/;"	f	class:Epoll	signature:(Event* &event)
Epoll::SaveEvent	Epoll.h	/^	void SaveEvent(Event*&);$/;"	p	class:Epoll	access:public	signature:(Event*&)
Epoll::SendEvents	Epoll.cpp	/^int Epoll::SendEvents(Event* &event)$/;"	f	class:Epoll	signature:(Event* &event)
Epoll::SendEvents	Epoll.h	/^	int SendEvents(Event* &event);$/;"	p	class:Epoll	access:public	signature:(Event* &event)
Epoll::SetSourceID	Epoll.cpp	/^void Epoll::SetSourceID(int fd, int sId)$/;"	f	class:Epoll	signature:(int fd, int sId)
Epoll::SetSourceID	Epoll.h	/^	void SetSourceID(int, int);$/;"	p	class:Epoll	access:public	signature:(int, int)
Epoll::epfd_	Epoll.h	/^	int epfd_;$/;"	m	class:Epoll	access:private
Epoll::listen_list_	Epoll.h	/^	map<int, boost::shared_ptr<TcpConnection> > listen_list_;$/;"	m	class:Epoll	access:private
Epoll::mapSourceIDToSaveEvents_	Epoll.h	/^	map<int, vector<Event*> > mapSourceIDToSaveEvents_;$/;"	m	class:Epoll	access:private
Epoll::mapSourceID_	Epoll.h	/^	map<int, int> mapSourceID_;$/;"	m	class:Epoll	access:private
Epoll::server_	Epoll.h	/^	TcpConnection server_;$/;"	m	class:Epoll	access:private
Epoll::waitEP_	Epoll.h	/^	epoll_event	waitEP_[MAXEVENTS];	$/;"	m	class:Epoll	access:private
Epoll::~Epoll	Epoll.h	/^	~Epoll(){}$/;"	f	class:Epoll	access:public	signature:()
Event	Event.h	/^class Event$/;"	c
Event::getName	Event.h	/^	const char* getName() const{$/;"	f	class:Event	access:public	signature:() const
Event::l1	Event.h	/^	level1 l1;$/;"	m	class:Event	access:public
Event::name_	Event.h	/^	char name_[32];$/;"	m	class:Event	access:private
Event::setName	Event.h	/^	void setName(const char* name){$/;"	f	class:Event	access:public	signature:(const char* name)
EventFactory	EventFactory.h	/^class EventFactory{$/;"	c
EventFactory::GetEvent	EventFactory.cpp	/^Event* EventFactory::GetEvent(char* buf, int size)$/;"	f	class:EventFactory	signature:(char* buf, int size)
EventFactory::GetEvent	EventFactory.h	/^	Event* GetEvent(char*,  int);$/;"	p	class:EventFactory	access:public	signature:(char*, int)
EventFactory::create	EventFactory.h	/^	virtual Event* create()=0;$/;"	p	class:EventFactory	access:public	signature:()
EventFunc	EventFunc.h	/^	EventFunc(FuncPtr func, Event*& event, ThreadPool* tp):$/;"	f	class:EventFunc	access:public	signature:(FuncPtr func, Event*& event, ThreadPool* tp)
EventFunc	EventFunc.h	/^class EventFunc$/;"	c
EventFunc::EventFunc	EventFunc.h	/^	EventFunc(FuncPtr func, Event*& event, ThreadPool* tp):$/;"	f	class:EventFunc	access:public	signature:(FuncPtr func, Event*& event, ThreadPool* tp)
EventFunc::doWork	EventFunc.h	/^	void doWork(){$/;"	f	class:EventFunc	access:public	signature:()
EventFunc::event_	EventFunc.h	/^	Event* event_;$/;"	m	class:EventFunc	access:private
EventFunc::func_	EventFunc.h	/^	FuncPtr func_;$/;"	m	class:EventFunc	access:private
EventFunc::pool_	EventFunc.h	/^	ThreadPool* pool_;$/;"	m	class:EventFunc	access:private
EventLoop	EventLoop.cpp	/^EventLoop::EventLoop():$/;"	f	class:EventLoop	signature:()
EventLoop	EventLoop.h	/^	EventLoop();$/;"	p	class:EventLoop	access:public	signature:()
EventLoop	EventLoop.h	/^class EventLoop: $/;"	c	inherits:boost::noncopyable
EventLoop::EventLoop	EventLoop.cpp	/^EventLoop::EventLoop():$/;"	f	class:EventLoop	signature:()
EventLoop::EventLoop	EventLoop.h	/^	EventLoop();$/;"	p	class:EventLoop	access:public	signature:()
EventLoop::Quit	EventLoop.h	/^	void Quit(){$/;"	f	class:EventLoop	access:public	signature:()
EventLoop::eventSources_	EventLoop.h	/^	vector<boost::shared_ptr<EventSourceBase> > eventSources_;$/;"	m	class:EventLoop	access:private
EventLoop::eventTarget_	EventLoop.h	/^	map<string, boost::shared_ptr<EventTargetBase> > eventTarget_;$/;"	m	class:EventLoop	access:private
EventLoop::loop	EventLoop.cpp	/^void EventLoop::loop()$/;"	f	class:EventLoop	signature:()
EventLoop::loop	EventLoop.h	/^	void loop();$/;"	p	class:EventLoop	access:public	signature:()
EventLoop::looping_	EventLoop.h	/^	bool looping_;$/;"	m	class:EventLoop	access:private
EventLoop::mutex_	EventLoop.h	/^	CMutex mutex_;$/;"	m	class:EventLoop	access:private
EventLoop::protocolFactorys_	EventLoop.h	/^	map<string, boost::shared_ptr<ProtocolFactory> > protocolFactorys_;$/;"	m	class:EventLoop	access:private
EventLoop::qError_	EventLoop.h	/^	boost::lockfree::queue<Event*, boost::lockfree::fixed_sized<false> > qError_;$/;"	m	class:EventLoop	access:private
EventLoop::qIn_	EventLoop.h	/^	boost::lockfree::queue<Event*, boost::lockfree::fixed_sized<false> > qIn_;$/;"	m	class:EventLoop	access:private
EventLoop::qOut_	EventLoop.h	/^	boost::lockfree::queue<Event*, boost::lockfree::fixed_sized<false> > qOut_;$/;"	m	class:EventLoop	access:private
EventLoop::reg	EventLoop.h	/^	void reg(boost::shared_ptr<EventSourceBase>& source){$/;"	f	class:EventLoop	access:public	signature:(boost::shared_ptr<EventSourceBase>& source)
EventLoop::reg	EventLoop.h	/^	void reg(string eventName, FuncPtr func){$/;"	f	class:EventLoop	access:public	signature:(string eventName, FuncPtr func)
EventLoop::reg	EventLoop.h	/^	void reg(string name, boost::shared_ptr<EventFactory>& factory){$/;"	f	class:EventLoop	access:public	signature:(string name, boost::shared_ptr<EventFactory>& factory)
EventLoop::reg	EventLoop.h	/^	void reg(string name, boost::shared_ptr<EventTargetBase>& target){$/;"	f	class:EventLoop	access:public	signature:(string name, boost::shared_ptr<EventTargetBase>& target)
EventLoop::reg	EventLoop.h	/^	void reg(string protocolName, boost::shared_ptr<ProtocolFactory>& factory){$/;"	f	class:EventLoop	access:public	signature:(string protocolName, boost::shared_ptr<ProtocolFactory>& factory)
EventLoop::threadPool_	EventLoop.h	/^	ThreadPool threadPool_;$/;"	m	class:EventLoop	access:private
EventLoop::~EventLoop	EventLoop.cpp	/^EventLoop::~EventLoop()$/;"	f	class:EventLoop	signature:()
EventLoop::~EventLoop	EventLoop.h	/^	~EventLoop();$/;"	p	class:EventLoop	access:public	signature:()
EventSourceBase	EventSourceBase.cpp	/^EventSourceBase::EventSourceBase()$/;"	f	class:EventSourceBase	signature:()
EventSourceBase	EventSourceBase.h	/^	EventSourceBase();$/;"	p	class:EventSourceBase	access:public	signature:()
EventSourceBase	EventSourceBase.h	/^class EventSourceBase$/;"	c
EventSourceBase::EventSourceBase	EventSourceBase.cpp	/^EventSourceBase::EventSourceBase()$/;"	f	class:EventSourceBase	signature:()
EventSourceBase::EventSourceBase	EventSourceBase.h	/^	EventSourceBase();$/;"	p	class:EventSourceBase	access:public	signature:()
EventSourceBase::GetEvents	EventSourceBase.cpp	/^void EventSourceBase::GetEvents(vector<Event*>& ret)$/;"	f	class:EventSourceBase	signature:(vector<Event*>& ret)
EventSourceBase::GetEvents	EventSourceBase.h	/^	virtual	void GetEvents(vector<Event*>&);$/;"	p	class:EventSourceBase	access:public	signature:(vector<Event*>&)
EventSourceBase::init	EventSourceBase.cpp	/^void EventSourceBase::init()$/;"	f	class:EventSourceBase	signature:()
EventSourceBase::init	EventSourceBase.h	/^	virtual void init();$/;"	p	class:EventSourceBase	access:public	signature:()
EventSourceBase::~EventSourceBase	EventSourceBase.cpp	/^EventSourceBase::~EventSourceBase()$/;"	f	class:EventSourceBase	signature:()
EventSourceBase::~EventSourceBase	EventSourceBase.h	/^	virtual ~EventSourceBase();$/;"	p	class:EventSourceBase	access:public	signature:()
EventTargetBase	EventTargetBase.cpp	/^EventTargetBase::EventTargetBase()$/;"	f	class:EventTargetBase	signature:()
EventTargetBase	EventTargetBase.h	/^	EventTargetBase();$/;"	p	class:EventTargetBase	access:public	signature:()
EventTargetBase	EventTargetBase.h	/^class EventTargetBase$/;"	c
EventTargetBase::EventTargetBase	EventTargetBase.cpp	/^EventTargetBase::EventTargetBase()$/;"	f	class:EventTargetBase	signature:()
EventTargetBase::EventTargetBase	EventTargetBase.h	/^	EventTargetBase();$/;"	p	class:EventTargetBase	access:public	signature:()
EventTargetBase::SendEvents	EventTargetBase.cpp	/^int EventTargetBase::SendEvents(Event*& ret)$/;"	f	class:EventTargetBase	signature:(Event*& ret)
EventTargetBase::SendEvents	EventTargetBase.h	/^	virtual	int SendEvents(Event* &);$/;"	p	class:EventTargetBase	access:public	signature:(Event* &)
EventTargetBase::~EventTargetBase	EventTargetBase.cpp	/^EventTargetBase::~EventTargetBase()$/;"	f	class:EventTargetBase	signature:()
EventTargetBase::~EventTargetBase	EventTargetBase.h	/^	virtual ~EventTargetBase();$/;"	p	class:EventTargetBase	access:public	signature:()
Fd	TcpConnection.cpp	/^int TcpConnection::Fd()$/;"	f	class:TcpConnection	signature:()
Fd	TcpConnection.h	/^	int Fd();$/;"	p	class:TcpConnection	access:public	signature:()
FuncPtr	Event.h	/^typedef boost::function<int(Event*&, ThreadPool*)> FuncPtr;$/;"	t
GetEvent	EventFactory.cpp	/^Event* EventFactory::GetEvent(char* buf, int size)$/;"	f	class:EventFactory	signature:(char* buf, int size)
GetEvent	EventFactory.h	/^	Event* GetEvent(char*,  int);$/;"	p	class:EventFactory	access:public	signature:(char*, int)
GetEvent	StorageZone.cpp	/^void StorageZone::GetEvent(int id, vector<Event* >& rhs)$/;"	f	class:StorageZone	signature:(int id, vector<Event* >& rhs)
GetEvent	StorageZone.h	/^	void GetEvent(int, vector<Event*>&);$/;"	p	class:StorageZone	access:public	signature:(int, vector<Event*>&)
GetEvents	Epoll.cpp	/^void Epoll::GetEvents(vector<Event*>&ret_eventArray)$/;"	f	class:Epoll	signature:(vector<Event*>&ret_eventArray)
GetEvents	Epoll.h	/^	void GetEvents(vector<Event*>&);$/;"	p	class:Epoll	access:public	signature:(vector<Event*>&)
GetEvents	EventSourceBase.cpp	/^void EventSourceBase::GetEvents(vector<Event*>& ret)$/;"	f	class:EventSourceBase	signature:(vector<Event*>& ret)
GetEvents	EventSourceBase.h	/^	virtual	void GetEvents(vector<Event*>&);$/;"	p	class:EventSourceBase	access:public	signature:(vector<Event*>&)
GetInstance	StorageZone.cpp	/^StorageZone* StorageZone::GetInstance()$/;"	f	class:StorageZone	signature:()
GetInstance	StorageZone.h	/^	static StorageZone* GetInstance();$/;"	p	class:StorageZone	access:public	signature:()
GetObject	StorageZone.cpp	/^bool StorageZone::GetObject(int id, boost::shared_ptr<TcpConnection>& rhs)$/;"	f	class:StorageZone	signature:(int id, boost::shared_ptr<TcpConnection>& rhs)
GetObject	StorageZone.h	/^	bool GetObject(int, boost::shared_ptr<TcpConnection>&);$/;"	p	class:StorageZone	access:public	signature:(int, boost::shared_ptr<TcpConnection>&)
IN	ThreadPool.h	5;"	d
IPAddress	IPAddress.h	/^class IPAddress{$/;"	c
LDFLAGS	makefile	/^LDFLAGS := $/;"	m
LIBS	makefile	/^LIBS := boost_system pthread boost_thread$/;"	m
LISTENQ	TcpConnection.h	7;"	d
LoadEvents	Epoll.cpp	/^void Epoll::LoadEvents(int sId, vector<Event*> &vecEvent)$/;"	f	class:Epoll	signature:(int sId, vector<Event*> &vecEvent)
LoadEvents	Epoll.h	/^	void LoadEvents(int, vector<Event*>&);$/;"	p	class:Epoll	access:public	signature:(int, vector<Event*>&)
MAXEVENTS	Epoll.h	7;"	d
MAXREADBUFFER	TcpConnection.h	6;"	d
OUT	ThreadPool.h	6;"	d
OnError	TcpConnection.cpp	/^int TcpConnection::OnError()$/;"	f	class:TcpConnection	signature:()
OnError	TcpConnection.h	/^	int OnError();$/;"	p	class:TcpConnection	access:public	signature:()
OnRead	TcpConnection.cpp	/^int TcpConnection::OnRead(vector<Event*> &ret_vecEF)$/;"	f	class:TcpConnection	signature:(vector<Event*> &ret_vecEF)
OnRead	TcpConnection.h	/^	int OnRead(vector<Event*>&);$/;"	p	class:TcpConnection	access:public	signature:(vector<Event*>&)
OnWrite	TcpConnection.cpp	/^int TcpConnection::OnWrite()$/;"	f	class:TcpConnection	signature:()
OnWrite	TcpConnection.h	/^	int OnWrite();$/;"	p	class:TcpConnection	access:public	signature:()
ProtocolConnRules	ProtocolConnRules.h	/^class ProtocolConnRules$/;"	c
ProtocolFactory	ProtocolFactory.h	/^class ProtocolFactory$/;"	c
ProtocolWaitPool	ProtocolWaitPool.h	/^class ProtocolWaitPool$/;"	c
Quit	EventLoop.h	/^	void Quit(){$/;"	f	class:EventLoop	access:public	signature:()
Run	ThreadPool.cpp	/^void ThreadPool::Run()$/;"	f	class:ThreadPool	signature:()
Run	ThreadPool.h	/^	void Run();$/;"	p	class:ThreadPool	access:public	signature:()
SaveEvent	Epoll.cpp	/^void Epoll::SaveEvent(Event* &event)$/;"	f	class:Epoll	signature:(Event* &event)
SaveEvent	Epoll.h	/^	void SaveEvent(Event*&);$/;"	p	class:Epoll	access:public	signature:(Event*&)
SendEvents	Epoll.cpp	/^int Epoll::SendEvents(Event* &event)$/;"	f	class:Epoll	signature:(Event* &event)
SendEvents	Epoll.h	/^	int SendEvents(Event* &event);$/;"	p	class:Epoll	access:public	signature:(Event* &event)
SendEvents	EventTargetBase.cpp	/^int EventTargetBase::SendEvents(Event*& ret)$/;"	f	class:EventTargetBase	signature:(Event*& ret)
SendEvents	EventTargetBase.h	/^	virtual	int SendEvents(Event* &);$/;"	p	class:EventTargetBase	access:public	signature:(Event* &)
ServerTcpEvent	ServerTcpEvent.h	/^class ServerTcpEvent:$/;"	c	inherits:Event
ServerTcpEvent::buf_	ServerTcpEvent.h	/^	vector<char> buf_;$/;"	m	class:ServerTcpEvent	access:private
ServerTcpEvent::fd_	ServerTcpEvent.h	/^	int fd_;$/;"	m	class:ServerTcpEvent	access:private
ServerTcpEvent::getBuf	ServerTcpEvent.h	/^	const vector<char>& getBuf() const{$/;"	f	class:ServerTcpEvent	access:public	signature:() const
ServerTcpEvent::getFd	ServerTcpEvent.h	/^	const int& getFd() const{$/;"	f	class:ServerTcpEvent	access:public	signature:() const
ServerTcpEvent::setBuf	ServerTcpEvent.h	/^	void setBuf(vector<char>& vc){$/;"	f	class:ServerTcpEvent	access:public	signature:(vector<char>& vc)
ServerTcpEvent::setFd	ServerTcpEvent.h	/^	void setFd(int &i){$/;"	f	class:ServerTcpEvent	access:public	signature:(int &i)
SetIpPort	TcpConnection.cpp	/^void TcpConnection::SetIpPort(const string& ip, const string& port)$/;"	f	class:TcpConnection	signature:(const string& ip, const string& port)
SetIpPort	TcpConnection.h	/^	void SetIpPort(const string&, const string&);$/;"	p	class:TcpConnection	access:public	signature:(const string&, const string&)
SetNonBlock	TcpConnection.cpp	/^void TcpConnection::SetNonBlock()$/;"	f	class:TcpConnection	signature:()
SetNonBlock	TcpConnection.h	/^	void SetNonBlock();\/\/构造函数，默认就会调用$/;"	p	class:TcpConnection	access:public	signature:()
SetSourceID	Epoll.cpp	/^void Epoll::SetSourceID(int fd, int sId)$/;"	f	class:Epoll	signature:(int fd, int sId)
SetSourceID	Epoll.h	/^	void SetSourceID(int, int);$/;"	p	class:Epoll	access:public	signature:(int, int)
StateMachine	StateMachine.h	/^class StateMachine$/;"	c
StorageZone	StorageZone.h	/^	StorageZone(){};$/;"	f	class:StorageZone	access:private	signature:()
StorageZone	StorageZone.h	/^	StorageZone(const StorageZone& rhs){};$/;"	f	class:StorageZone	access:private	signature:(const StorageZone& rhs)
StorageZone	StorageZone.h	/^class StorageZone{$/;"	c
StorageZone::Addition	StorageZone.cpp	/^void StorageZone::Addition(int id, Event*& pEvent)$/;"	f	class:StorageZone	signature:(int id, Event*& pEvent)
StorageZone::Addition	StorageZone.cpp	/^void StorageZone::Addition(int id, boost::weak_ptr<TcpConnection> pTcp)$/;"	f	class:StorageZone	signature:(int id, boost::weak_ptr<TcpConnection> pTcp)
StorageZone::Addition	StorageZone.h	/^	void Addition(int, Event*&);$/;"	p	class:StorageZone	access:public	signature:(int, Event*&)
StorageZone::Addition	StorageZone.h	/^	void Addition(int, boost::weak_ptr<TcpConnection>);$/;"	p	class:StorageZone	access:public	signature:(int, boost::weak_ptr<TcpConnection>)
StorageZone::GetEvent	StorageZone.cpp	/^void StorageZone::GetEvent(int id, vector<Event* >& rhs)$/;"	f	class:StorageZone	signature:(int id, vector<Event* >& rhs)
StorageZone::GetEvent	StorageZone.h	/^	void GetEvent(int, vector<Event*>&);$/;"	p	class:StorageZone	access:public	signature:(int, vector<Event*>&)
StorageZone::GetInstance	StorageZone.cpp	/^StorageZone* StorageZone::GetInstance()$/;"	f	class:StorageZone	signature:()
StorageZone::GetInstance	StorageZone.h	/^	static StorageZone* GetInstance();$/;"	p	class:StorageZone	access:public	signature:()
StorageZone::GetObject	StorageZone.cpp	/^bool StorageZone::GetObject(int id, boost::shared_ptr<TcpConnection>& rhs)$/;"	f	class:StorageZone	signature:(int id, boost::shared_ptr<TcpConnection>& rhs)
StorageZone::GetObject	StorageZone.h	/^	bool GetObject(int, boost::shared_ptr<TcpConnection>&);$/;"	p	class:StorageZone	access:public	signature:(int, boost::shared_ptr<TcpConnection>&)
StorageZone::StorageZone	StorageZone.h	/^	StorageZone(){};$/;"	f	class:StorageZone	access:private	signature:()
StorageZone::StorageZone	StorageZone.h	/^	StorageZone(const StorageZone& rhs){};$/;"	f	class:StorageZone	access:private	signature:(const StorageZone& rhs)
StorageZone::instance_	StorageZone.cpp	/^StorageZone* StorageZone::instance_ = NULL;$/;"	m	class:StorageZone	file:
StorageZone::instance_	StorageZone.h	/^	static StorageZone* instance_;$/;"	m	class:StorageZone	access:private
StorageZone::mapOnEvents_	StorageZone.h	/^	map<int, vector<Event*> > mapOnEvents_;$/;"	m	class:StorageZone	access:private
StorageZone::mapOnObject_	StorageZone.h	/^	map<int, boost::weak_ptr<TcpConnection> > mapOnObject_;$/;"	m	class:StorageZone	access:private
StorageZone::operator =	StorageZone.h	/^	StorageZone& operator =(const StorageZone& rhs);$/;"	p	class:StorageZone	access:private	signature:(const StorageZone& rhs)
Target	Target.h	/^class Target$/;"	c
TcpConnection	TcpConnection.h	/^	TcpConnection(Epoll* e):isWrite_(true){$/;"	f	class:TcpConnection	access:public	signature:(Epoll* e)
TcpConnection	TcpConnection.h	/^class TcpConnection$/;"	c
TcpConnection::Fd	TcpConnection.cpp	/^int TcpConnection::Fd()$/;"	f	class:TcpConnection	signature:()
TcpConnection::Fd	TcpConnection.h	/^	int Fd();$/;"	p	class:TcpConnection	access:public	signature:()
TcpConnection::OnError	TcpConnection.cpp	/^int TcpConnection::OnError()$/;"	f	class:TcpConnection	signature:()
TcpConnection::OnError	TcpConnection.h	/^	int OnError();$/;"	p	class:TcpConnection	access:public	signature:()
TcpConnection::OnRead	TcpConnection.cpp	/^int TcpConnection::OnRead(vector<Event*> &ret_vecEF)$/;"	f	class:TcpConnection	signature:(vector<Event*> &ret_vecEF)
TcpConnection::OnRead	TcpConnection.h	/^	int OnRead(vector<Event*>&);$/;"	p	class:TcpConnection	access:public	signature:(vector<Event*>&)
TcpConnection::OnWrite	TcpConnection.cpp	/^int TcpConnection::OnWrite()$/;"	f	class:TcpConnection	signature:()
TcpConnection::OnWrite	TcpConnection.h	/^	int OnWrite();$/;"	p	class:TcpConnection	access:public	signature:()
TcpConnection::SetIpPort	TcpConnection.cpp	/^void TcpConnection::SetIpPort(const string& ip, const string& port)$/;"	f	class:TcpConnection	signature:(const string& ip, const string& port)
TcpConnection::SetIpPort	TcpConnection.h	/^	void SetIpPort(const string&, const string&);$/;"	p	class:TcpConnection	access:public	signature:(const string&, const string&)
TcpConnection::SetNonBlock	TcpConnection.cpp	/^void TcpConnection::SetNonBlock()$/;"	f	class:TcpConnection	signature:()
TcpConnection::SetNonBlock	TcpConnection.h	/^	void SetNonBlock();\/\/构造函数，默认就会调用$/;"	p	class:TcpConnection	access:public	signature:()
TcpConnection::TcpConnection	TcpConnection.h	/^	TcpConnection(Epoll* e):isWrite_(true){$/;"	f	class:TcpConnection	access:public	signature:(Epoll* e)
TcpConnection::epoll_	TcpConnection.h	/^	Epoll* epoll_;$/;"	m	class:TcpConnection	access:private
TcpConnection::fd_	TcpConnection.h	/^	int fd_;$/;"	m	class:TcpConnection	access:private
TcpConnection::ip_	TcpConnection.h	/^	string ip_;$/;"	m	class:TcpConnection	access:private
TcpConnection::isWrite_	TcpConnection.h	/^	bool isWrite_; \/\/能否进行写入$/;"	m	class:TcpConnection	access:private
TcpConnection::openClient	TcpConnection.h	/^	bool openClient();$/;"	p	class:TcpConnection	access:public	signature:()
TcpConnection::openServer	TcpConnection.cpp	/^bool TcpConnection::openServer()$/;"	f	class:TcpConnection	signature:()
TcpConnection::openServer	TcpConnection.h	/^	bool openServer();$/;"	p	class:TcpConnection	access:public	signature:()
TcpConnection::open_	TcpConnection.h	/^	bool open_;\/\/是否已经开启某种模式$/;"	m	class:TcpConnection	access:private
TcpConnection::port_	TcpConnection.h	/^	int port_;$/;"	m	class:TcpConnection	access:private
TcpConnection::readBuffer_	TcpConnection.h	/^	Buffer readBuffer_; \/\/缓冲区$/;"	m	class:TcpConnection	access:private
TcpConnection::send	TcpConnection.cpp	/^int TcpConnection::send()$/;"	f	class:TcpConnection	signature:()
TcpConnection::send	TcpConnection.h	/^	int send();$/;"	p	class:TcpConnection	access:public	signature:()
TcpConnection::setFd	TcpConnection.cpp	/^void TcpConnection::setFd(int f)$/;"	f	class:TcpConnection	signature:(int f)
TcpConnection::setFd	TcpConnection.h	/^	void setFd(int f);$/;"	p	class:TcpConnection	access:public	signature:(int f)
TcpConnection::write	TcpConnection.cpp	/^int TcpConnection::write(Event*& event)$/;"	f	class:TcpConnection	signature:(Event*& event)
TcpConnection::write	TcpConnection.h	/^	int write(Event*&);\/\/用来发送数据的$/;"	p	class:TcpConnection	access:public	signature:(Event*&)
TcpConnection::writeBuffer_	TcpConnection.h	/^	Buffer writeBuffer_; \/\/缓冲区$/;"	m	class:TcpConnection	access:private
TcpConnection::~TcpConnection	TcpConnection.cpp	/^TcpConnection::~TcpConnection()$/;"	f	class:TcpConnection	signature:()
TcpConnection::~TcpConnection	TcpConnection.h	/^	~TcpConnection();$/;"	p	class:TcpConnection	access:public	signature:()
TcpRecvEventToOtherEvent	TcpConnection.cpp	/^int TcpRecvEventToOtherEvent(Event*& event, ThreadPool* pool)$/;"	f	signature:(Event*& event, ThreadPool* pool)
TcpRecvEventToOtherEvent	TcpConnection.h	/^int TcpRecvEventToOtherEvent(Event*&, ThreadPool*);$/;"	p	signature:(Event*&, ThreadPool*)
ThreadPool	ThreadPool.h	/^	ThreadPool(int threadCount,$/;"	f	class:ThreadPool	access:public	signature:(int threadCount, boost::lockfree::queue<Event*, boost::lockfree::fixed_sized<false> > &qIn, boost::lockfree::queue<Event*, boost::lockfree::fixed_sized<false> > &qOut, boost::lockfree::queue<Event*, boost::lockfree::fixed_sized<false> > &qError)
ThreadPool	ThreadPool.h	/^class ThreadPool$/;"	c
ThreadPool::Run	ThreadPool.cpp	/^void ThreadPool::Run()$/;"	f	class:ThreadPool	signature:()
ThreadPool::Run	ThreadPool.h	/^	void Run();$/;"	p	class:ThreadPool	access:public	signature:()
ThreadPool::ThreadPool	ThreadPool.h	/^	ThreadPool(int threadCount,$/;"	f	class:ThreadPool	access:public	signature:(int threadCount, boost::lockfree::queue<Event*, boost::lockfree::fixed_sized<false> > &qIn, boost::lockfree::queue<Event*, boost::lockfree::fixed_sized<false> > &qOut, boost::lockfree::queue<Event*, boost::lockfree::fixed_sized<false> > &qError)
ThreadPool::eventFactory_	ThreadPool.h	/^	map<string, boost::shared_ptr<EventFactory> > eventFactory_;$/;"	m	class:ThreadPool	access:private
ThreadPool::eventFunctionList_	ThreadPool.h	/^	map<string, FuncPtr> eventFunctionList_;$/;"	m	class:ThreadPool	access:private
ThreadPool::getFactroy	ThreadPool.h	/^	boost::shared_ptr<EventFactory> getFactroy(string name){$/;"	f	class:ThreadPool	access:public	signature:(string name)
ThreadPool::looping_	ThreadPool.h	/^	bool looping_;$/;"	m	class:ThreadPool	access:private
ThreadPool::push	ThreadPool.cpp	/^void ThreadPool::push(int Option, Event *e)$/;"	f	class:ThreadPool	signature:(int Option, Event *e)
ThreadPool::push	ThreadPool.h	/^	void push(int Option, Event *e);$/;"	p	class:ThreadPool	access:public	signature:(int Option, Event *e)
ThreadPool::qError_	ThreadPool.h	/^	boost::lockfree::queue<Event*, boost::lockfree::fixed_sized<false> > &qError_;$/;"	m	class:ThreadPool	access:private
ThreadPool::qIn_	ThreadPool.h	/^	boost::lockfree::queue<Event*, boost::lockfree::fixed_sized<false> > &qIn_;$/;"	m	class:ThreadPool	access:private
ThreadPool::qOut_	ThreadPool.h	/^	boost::lockfree::queue<Event*, boost::lockfree::fixed_sized<false> > &qOut_;$/;"	m	class:ThreadPool	access:private
ThreadPool::reg	ThreadPool.h	/^	void reg(string name, FuncPtr f){$/;"	f	class:ThreadPool	access:public	signature:(string name, FuncPtr f)
ThreadPool::reg	ThreadPool.h	/^	void reg(string name, boost::shared_ptr<EventFactory>& factory){$/;"	f	class:ThreadPool	access:public	signature:(string name, boost::shared_ptr<EventFactory>& factory)
ThreadPool::shutdown	ThreadPool.h	/^	void shutdown(){$/;"	f	class:ThreadPool	access:public	signature:()
ThreadPool::start	ThreadPool.h	/^	void start(){$/;"	f	class:ThreadPool	access:public	signature:()
ThreadPool::threadCount_	ThreadPool.h	/^	int threadCount_;$/;"	m	class:ThreadPool	access:private
ThreadPool::vecpThrd_	ThreadPool.h	/^	vector<boost::thread*> vecpThrd_;$/;"	m	class:ThreadPool	access:private
ThreadPool::~ThreadPool	ThreadPool.h	/^	~ThreadPool(){$/;"	f	class:ThreadPool	access:public	signature:()
append	Buffer.cpp	/^void Buffer::append(char* msg, size_t size)$/;"	f	class:Buffer	signature:(char* msg, size_t size)
append	Buffer.h	/^	void append(char*, size_t);$/;"	p	class:Buffer	access:public	signature:(char*, size_t)
buf_	ServerTcpEvent.h	/^	vector<char> buf_;$/;"	m	class:ServerTcpEvent	access:private
cc	makefile	/^cc = g++$/;"	m
clear	Buffer.h	/^	void clear(){$/;"	f	class:Buffer	access:public	signature:()
create	EventFactory.h	/^	virtual Event* create()=0;$/;"	p	class:EventFactory	access:public	signature:()
create	main.cpp	/^	Event* create(){$/;"	f	class:echoFactory	access:public	signature:()
data	Buffer.cpp	/^char* Buffer::data()$/;"	f	class:Buffer	signature:()
data	Buffer.h	/^	char* data();$/;"	p	class:Buffer	access:public	signature:()
doWork	EventFunc.h	/^	void doWork(){$/;"	f	class:EventFunc	access:public	signature:()
echo	main.cpp	/^int echo(Event*& event, ThreadPool *pool)$/;"	f	signature:(Event*& event, ThreadPool *pool)
echoEvent	main.cpp	/^struct echoEvent:public Event$/;"	s	file:	inherits:Event
echoEvent::msg	main.cpp	/^	char msg[32];$/;"	m	struct:echoEvent	file:	access:public
echoFactory	main.cpp	/^class echoFactory:$/;"	c	file:	inherits:EventFactory
echoFactory::create	main.cpp	/^	Event* create(){$/;"	f	class:echoFactory	access:public	signature:()
epfd_	Epoll.h	/^	int epfd_;$/;"	m	class:Epoll	access:private
epoll_	TcpConnection.h	/^	Epoll* epoll_;$/;"	m	class:TcpConnection	access:private
eventFactory_	ThreadPool.h	/^	map<string, boost::shared_ptr<EventFactory> > eventFactory_;$/;"	m	class:ThreadPool	access:private
eventFunctionList_	ThreadPool.h	/^	map<string, FuncPtr> eventFunctionList_;$/;"	m	class:ThreadPool	access:private
eventSources_	EventLoop.h	/^	vector<boost::shared_ptr<EventSourceBase> > eventSources_;$/;"	m	class:EventLoop	access:private
eventTarget_	EventLoop.h	/^	map<string, boost::shared_ptr<EventTargetBase> > eventTarget_;$/;"	m	class:EventLoop	access:private
event_	EventFunc.h	/^	Event* event_;$/;"	m	class:EventFunc	access:private
fd_	ServerTcpEvent.h	/^	int fd_;$/;"	m	class:ServerTcpEvent	access:private
fd_	TcpConnection.h	/^	int fd_;$/;"	m	class:TcpConnection	access:private
featureCode	CommunicationsProtocol.h	/^	char			featureCode[4];	$/;"	m	struct:level1	access:public
func_	EventFunc.h	/^	FuncPtr func_;$/;"	m	class:EventFunc	access:private
getBuf	ServerTcpEvent.h	/^	const vector<char>& getBuf() const{$/;"	f	class:ServerTcpEvent	access:public	signature:() const
getFactroy	ThreadPool.h	/^	boost::shared_ptr<EventFactory> getFactroy(string name){$/;"	f	class:ThreadPool	access:public	signature:(string name)
getFd	ServerTcpEvent.h	/^	const int& getFd() const{$/;"	f	class:ServerTcpEvent	access:public	signature:() const
getName	Event.h	/^	const char* getName() const{$/;"	f	class:Event	access:public	signature:() const
hasData	Buffer.cpp	/^bool Buffer::hasData()$/;"	f	class:Buffer	signature:()
hasData	Buffer.h	/^	bool hasData();	$/;"	p	class:Buffer	access:public	signature:()
include_dirs	makefile	/^include_dirs := $/;"	m
init	EventSourceBase.cpp	/^void EventSourceBase::init()$/;"	f	class:EventSourceBase	signature:()
init	EventSourceBase.h	/^	virtual void init();$/;"	p	class:EventSourceBase	access:public	signature:()
instance_	StorageZone.cpp	/^StorageZone* StorageZone::instance_ = NULL;$/;"	m	class:StorageZone	file:
instance_	StorageZone.h	/^	static StorageZone* instance_;$/;"	m	class:StorageZone	access:private
ip_	TcpConnection.h	/^	string ip_;$/;"	m	class:TcpConnection	access:private
isWrite_	TcpConnection.h	/^	bool isWrite_; \/\/能否进行写入$/;"	m	class:TcpConnection	access:private
jumpCount	CommunicationsProtocol.h	/^	unsigned int	jumpCount;$/;"	m	struct:level1	access:public
l1	Event.h	/^	level1 l1;$/;"	m	class:Event	access:public
length	Buffer.cpp	/^int Buffer::length()$/;"	f	class:Buffer	signature:()
length	Buffer.h	/^	int length();$/;"	p	class:Buffer	access:public	signature:()
length_	Buffer.h	/^	int length_;$/;"	m	class:Buffer	access:private
level1	CommunicationsProtocol.h	/^struct level1{$/;"	s
level1::featureCode	CommunicationsProtocol.h	/^	char			featureCode[4];	$/;"	m	struct:level1	access:public
level1::jumpCount	CommunicationsProtocol.h	/^	unsigned int	jumpCount;$/;"	m	struct:level1	access:public
level1::level2Name	CommunicationsProtocol.h	/^	char			level2Name[32];	\/\/放消息的名字$/;"	m	struct:level1	access:public
level1::level2Size	CommunicationsProtocol.h	/^	unsigned int	level2Size;$/;"	m	struct:level1	access:public
level1::missCount	CommunicationsProtocol.h	/^	unsigned int	missCount;$/;"	m	struct:level1	access:public
level1::serialNumber	CommunicationsProtocol.h	/^	unsigned long	serialNumber;$/;"	m	struct:level1	access:public
level1::set	CommunicationsProtocol.h	/^	void set(const char* f, int l, int s, int t, int j, int m, int se, const char* le)$/;"	f	struct:level1	access:public	signature:(const char* f, int l, int s, int t, int j, int m, int se, const char* le)
level1::sourceID	CommunicationsProtocol.h	/^	unsigned int	sourceID;$/;"	m	struct:level1	access:public
level1::targetID	CommunicationsProtocol.h	/^	unsigned int	targetID;$/;"	m	struct:level1	access:public
level2Name	CommunicationsProtocol.h	/^	char			level2Name[32];	\/\/放消息的名字$/;"	m	struct:level1	access:public
level2Size	CommunicationsProtocol.h	/^	unsigned int	level2Size;$/;"	m	struct:level1	access:public
linkFlags	makefile	/^linkFlags := -g -Wall $/;"	m
listen_list_	Epoll.h	/^	map<int, boost::shared_ptr<TcpConnection> > listen_list_;$/;"	m	class:Epoll	access:private
lock	CMutex.h	/^	void lock(){$/;"	f	class:CMutex	access:public	signature:()
loop	EventLoop.cpp	/^void EventLoop::loop()$/;"	f	class:EventLoop	signature:()
loop	EventLoop.h	/^	void loop();$/;"	p	class:EventLoop	access:public	signature:()
looping_	EventLoop.h	/^	bool looping_;$/;"	m	class:EventLoop	access:private
looping_	ThreadPool.h	/^	bool looping_;$/;"	m	class:ThreadPool	access:private
main	main.cpp	/^int main()$/;"	f	signature:()
mapOnEvents_	StorageZone.h	/^	map<int, vector<Event*> > mapOnEvents_;$/;"	m	class:StorageZone	access:private
mapOnObject_	StorageZone.h	/^	map<int, boost::weak_ptr<TcpConnection> > mapOnObject_;$/;"	m	class:StorageZone	access:private
mapSourceIDToSaveEvents_	Epoll.h	/^	map<int, vector<Event*> > mapSourceIDToSaveEvents_;$/;"	m	class:Epoll	access:private
mapSourceID_	Epoll.h	/^	map<int, int> mapSourceID_;$/;"	m	class:Epoll	access:private
missCount	CommunicationsProtocol.h	/^	unsigned int	missCount;$/;"	m	struct:level1	access:public
msg	main.cpp	/^	char msg[32];$/;"	m	struct:echoEvent	file:	access:public
mutex_	AutoMutex.h	/^	CMutex mutex_;$/;"	m	class:AutoMutex	access:private
mutex_	CMutex.h	/^	pthread_mutex_t mutex_;$/;"	m	class:CMutex	access:private
mutex_	EventLoop.h	/^	CMutex mutex_;$/;"	m	class:EventLoop	access:private
name_	Event.h	/^	char name_[32];$/;"	m	class:Event	access:private
objects	makefile	/^objects := $(patsubst %.cpp,%.o,$(wildcard *.cpp))$/;"	m
openClient	TcpConnection.h	/^	bool openClient();$/;"	p	class:TcpConnection	access:public	signature:()
openServer	TcpConnection.cpp	/^bool TcpConnection::openServer()$/;"	f	class:TcpConnection	signature:()
openServer	TcpConnection.h	/^	bool openServer();$/;"	p	class:TcpConnection	access:public	signature:()
open_	TcpConnection.h	/^	bool open_;\/\/是否已经开启某种模式$/;"	m	class:TcpConnection	access:private
operator =	StorageZone.h	/^	StorageZone& operator =(const StorageZone& rhs);$/;"	p	class:StorageZone	access:private	signature:(const StorageZone& rhs)
pool_	EventFunc.h	/^	ThreadPool* pool_;$/;"	m	class:EventFunc	access:private
port_	TcpConnection.h	/^	int port_;$/;"	m	class:TcpConnection	access:private
protocolFactorys_	EventLoop.h	/^	map<string, boost::shared_ptr<ProtocolFactory> > protocolFactorys_;$/;"	m	class:EventLoop	access:private
push	ThreadPool.cpp	/^void ThreadPool::push(int Option, Event *e)$/;"	f	class:ThreadPool	signature:(int Option, Event *e)
push	ThreadPool.h	/^	void push(int Option, Event *e);$/;"	p	class:ThreadPool	access:public	signature:(int Option, Event *e)
qError_	EventLoop.h	/^	boost::lockfree::queue<Event*, boost::lockfree::fixed_sized<false> > qError_;$/;"	m	class:EventLoop	access:private
qError_	ThreadPool.h	/^	boost::lockfree::queue<Event*, boost::lockfree::fixed_sized<false> > &qError_;$/;"	m	class:ThreadPool	access:private
qIn_	EventLoop.h	/^	boost::lockfree::queue<Event*, boost::lockfree::fixed_sized<false> > qIn_;$/;"	m	class:EventLoop	access:private
qIn_	ThreadPool.h	/^	boost::lockfree::queue<Event*, boost::lockfree::fixed_sized<false> > &qIn_;$/;"	m	class:ThreadPool	access:private
qOut_	EventLoop.h	/^	boost::lockfree::queue<Event*, boost::lockfree::fixed_sized<false> > qOut_;$/;"	m	class:EventLoop	access:private
qOut_	ThreadPool.h	/^	boost::lockfree::queue<Event*, boost::lockfree::fixed_sized<false> > &qOut_;$/;"	m	class:ThreadPool	access:private
readBuffer_	TcpConnection.h	/^	Buffer readBuffer_; \/\/缓冲区$/;"	m	class:TcpConnection	access:private
reg	EventLoop.h	/^	void reg(boost::shared_ptr<EventSourceBase>& source){$/;"	f	class:EventLoop	access:public	signature:(boost::shared_ptr<EventSourceBase>& source)
reg	EventLoop.h	/^	void reg(string eventName, FuncPtr func){$/;"	f	class:EventLoop	access:public	signature:(string eventName, FuncPtr func)
reg	EventLoop.h	/^	void reg(string name, boost::shared_ptr<EventFactory>& factory){$/;"	f	class:EventLoop	access:public	signature:(string name, boost::shared_ptr<EventFactory>& factory)
reg	EventLoop.h	/^	void reg(string name, boost::shared_ptr<EventTargetBase>& target){$/;"	f	class:EventLoop	access:public	signature:(string name, boost::shared_ptr<EventTargetBase>& target)
reg	EventLoop.h	/^	void reg(string protocolName, boost::shared_ptr<ProtocolFactory>& factory){$/;"	f	class:EventLoop	access:public	signature:(string protocolName, boost::shared_ptr<ProtocolFactory>& factory)
reg	ThreadPool.h	/^	void reg(string name, FuncPtr f){$/;"	f	class:ThreadPool	access:public	signature:(string name, FuncPtr f)
reg	ThreadPool.h	/^	void reg(string name, boost::shared_ptr<EventFactory>& factory){$/;"	f	class:ThreadPool	access:public	signature:(string name, boost::shared_ptr<EventFactory>& factory)
send	TcpConnection.cpp	/^int TcpConnection::send()$/;"	f	class:TcpConnection	signature:()
send	TcpConnection.h	/^	int send();$/;"	p	class:TcpConnection	access:public	signature:()
serialNumber	CommunicationsProtocol.h	/^	unsigned long	serialNumber;$/;"	m	struct:level1	access:public
server_	Epoll.h	/^	TcpConnection server_;$/;"	m	class:Epoll	access:private
set	CommunicationsProtocol.h	/^	void set(const char* f, int l, int s, int t, int j, int m, int se, const char* le)$/;"	f	struct:level1	access:public	signature:(const char* f, int l, int s, int t, int j, int m, int se, const char* le)
setBuf	ServerTcpEvent.h	/^	void setBuf(vector<char>& vc){$/;"	f	class:ServerTcpEvent	access:public	signature:(vector<char>& vc)
setFd	ServerTcpEvent.h	/^	void setFd(int &i){$/;"	f	class:ServerTcpEvent	access:public	signature:(int &i)
setFd	TcpConnection.cpp	/^void TcpConnection::setFd(int f)$/;"	f	class:TcpConnection	signature:(int f)
setFd	TcpConnection.h	/^	void setFd(int f);$/;"	p	class:TcpConnection	access:public	signature:(int f)
setName	Event.h	/^	void setName(const char* name){$/;"	f	class:Event	access:public	signature:(const char* name)
shutdown	ThreadPool.h	/^	void shutdown(){$/;"	f	class:ThreadPool	access:public	signature:()
sourceID	CommunicationsProtocol.h	/^	unsigned int	sourceID;$/;"	m	struct:level1	access:public
start	ThreadPool.h	/^	void start(){$/;"	f	class:ThreadPool	access:public	signature:()
storage_	Buffer.h	/^	vector<char> storage_;$/;"	m	class:Buffer	access:private
target	makefile	/^target = Rano$/;"	m
targetID	CommunicationsProtocol.h	/^	unsigned int	targetID;$/;"	m	struct:level1	access:public
threadCount_	ThreadPool.h	/^	int threadCount_;$/;"	m	class:ThreadPool	access:private
threadPool_	EventLoop.h	/^	ThreadPool threadPool_;$/;"	m	class:EventLoop	access:private
unlock	CMutex.h	/^	void unlock(){$/;"	f	class:CMutex	access:public	signature:()
update	Buffer.cpp	/^void Buffer::update(size_t size)$/;"	f	class:Buffer	signature:(size_t size)
update	Buffer.h	/^	void update(size_t);$/;"	p	class:Buffer	access:public	signature:(size_t)
vecpThrd_	ThreadPool.h	/^	vector<boost::thread*> vecpThrd_;$/;"	m	class:ThreadPool	access:private
waitEP_	Epoll.h	/^	epoll_event	waitEP_[MAXEVENTS];	$/;"	m	class:Epoll	access:private
write	TcpConnection.cpp	/^int TcpConnection::write(Event*& event)$/;"	f	class:TcpConnection	signature:(Event*& event)
write	TcpConnection.h	/^	int write(Event*&);\/\/用来发送数据的$/;"	p	class:TcpConnection	access:public	signature:(Event*&)
writeBuffer_	TcpConnection.h	/^	Buffer writeBuffer_; \/\/缓冲区$/;"	m	class:TcpConnection	access:private
~AutoMutex	AutoMutex.h	/^	~AutoMutex(){$/;"	f	class:AutoMutex	access:public	signature:()
~CMutex	CMutex.h	/^	~CMutex(){$/;"	f	class:CMutex	access:public	signature:()
~Epoll	Epoll.h	/^	~Epoll(){}$/;"	f	class:Epoll	access:public	signature:()
~EventLoop	EventLoop.cpp	/^EventLoop::~EventLoop()$/;"	f	class:EventLoop	signature:()
~EventLoop	EventLoop.h	/^	~EventLoop();$/;"	p	class:EventLoop	access:public	signature:()
~EventSourceBase	EventSourceBase.cpp	/^EventSourceBase::~EventSourceBase()$/;"	f	class:EventSourceBase	signature:()
~EventSourceBase	EventSourceBase.h	/^	virtual ~EventSourceBase();$/;"	p	class:EventSourceBase	access:public	signature:()
~EventTargetBase	EventTargetBase.cpp	/^EventTargetBase::~EventTargetBase()$/;"	f	class:EventTargetBase	signature:()
~EventTargetBase	EventTargetBase.h	/^	virtual ~EventTargetBase();$/;"	p	class:EventTargetBase	access:public	signature:()
~TcpConnection	TcpConnection.cpp	/^TcpConnection::~TcpConnection()$/;"	f	class:TcpConnection	signature:()
~TcpConnection	TcpConnection.h	/^	~TcpConnection();$/;"	p	class:TcpConnection	access:public	signature:()
~ThreadPool	ThreadPool.h	/^	~ThreadPool(){$/;"	f	class:ThreadPool	access:public	signature:()
